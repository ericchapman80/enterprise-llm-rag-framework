// Global function for the onclick attribute
function sendMessageGlobal() {
    console.log('Global send function called');
    sendMessage();
}

// Main send message function
async function sendMessage() {
    console.log('sendMessage function called');
    const messagesContainer = document.getElementById('messages-container');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const userMessageTemplate = document.getElementById('user-message-template');
    const botMessageTemplate = document.getElementById('bot-message-template');
    
    if (!messageInput) {
        console.error('Message input not initialized');
        return;
    }
    
    const message = messageInput.value.trim();
    console.log('Message to send:', message);
    if (!message) {
        console.log('Message is empty, not sending');
        return;
    }

    messageInput.value = '';
    messageInput.style.height = 'auto';
    sendButton.disabled = true;
    console.log('Send button disabled');

    const userMessageNode = createUserMessage(message);
    messagesContainer.appendChild(userMessageNode);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    console.log('User message added to UI');

    try {
        let apiUrl = 'http://localhost:8000/chat/send';
        
        console.log('Sending message to API:', apiUrl);
        console.log('Request payload:', JSON.stringify({
            message: message,
            conversation_id: window.currentConversationId
        }));
        
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: message,
                conversation_id: window.currentConversationId
            }),
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('Received response:', data);
        
        // Update conversation ID for future messages
        if (data.conversation_id) {
            window.currentConversationId = data.conversation_id;
            console.log('Conversation ID updated:', window.currentConversationId);
        }
        
        const botMessageNode = createBotMessage(data.response, data.sources || []);
        messagesContainer.appendChild(botMessageNode);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to send message. Please try again.');
    } finally {
        sendButton.disabled = false;
    }
}

function createUserMessage(message) {
    const template = document.getElementById('user-message-template').content.cloneNode(true);
    template.querySelector('.message-content p').textContent = message;
    return template;
}

function createBotMessage(message, sources) {
    const template = document.getElementById('bot-message-template').content.cloneNode(true);
    template.querySelector('.message-content p').textContent = message;
    
    const sourcesList = template.querySelector('.sources ul');
    if (sources && sources.length > 0) {
        sources.forEach(source => {
            const li = document.createElement('li');
            li.textContent = source.content.substring(0, 100) + '...';
            sourcesList.appendChild(li);
        });
    } else {
        template.querySelector('.sources').style.display = 'none';
    }

    const feedbackButtons = template.querySelectorAll('.feedback-button');
    feedbackButtons.forEach(button => {
        button.addEventListener('click', async () => {
            if (button.classList.contains('selected')) return;
            
            feedbackButtons.forEach(b => b.classList.remove('selected'));
            button.classList.add('selected');
            
            try {
                let feedbackUrl = 'http://localhost:8000/chat/feedback';
                
                console.log('Sending feedback to:', feedbackUrl);
                
                await fetch(feedbackUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        conversation_id: window.currentConversationId,
                        message_idx: -1, // Latest message
                        feedback: button.dataset.value
                    }),
                    mode: 'cors'
                });
            } catch (error) {
                console.error('Error sending feedback:', error);
            }
        });
    });

    return template;
}

// Initialize on DOM load
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, initializing chat UI');
    
    window.currentConversationId = null;
    
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    
    sendButton.disabled = !messageInput.value.trim();
    
    messageInput.addEventListener('input', () => {
        console.log('Input event triggered, value:', messageInput.value);
        sendButton.disabled = !messageInput.value.trim();
        
        messageInput.style.height = 'auto';
        messageInput.style.height = messageInput.scrollHeight + 'px';
    });
    
    sendButton.addEventListener('click', function() {
        console.log('Send button clicked from event listener');
        sendMessage();
    });
    
    messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    messageInput.focus();
});
